<?php
/**
 *
 * @author Johan Steyn <jsteyn@quint.co.uk>
 * @link https://api.appcheck-ng.com/
 * Date: 2020/03/05
 * Time: 10:00
 */
namespace Inqbate\Appcheck;


class Vulnerability extends AppcheckAbstract
{

    /**
     * Performs an action on the object
     * @param string $keyword
     * @return object|null
     */
    private function performAction(string $keyword): ?object
    {
        if (!$this->id) {
            throw new Exceptions\RecordNotFoundException();
        }
        return $this->setRequestUri('vulnerability/' . $this->id . '/' . $keyword);

    }

    /**
     * Return details about a vulnerability
     *
     * Response JSON Object:
     *
     *      success (boolean) – operation was successful
     *      message (string) – human readable response
     *      data (object) – details of vulnerability
     *           data.vuln_id (string) – ID of the vulnerability
     *           data.title (string) – title of the vulnerability
     *           data.synopsis (string) – synopsis of the vulnerability
     *           data.description (string) – description of the vulnerability
     *           data.details (object) – details of the vulnerability
     *           data.solution (string) – solution of the vulnerability
     *           data.host (string) – host of the vulnerability
     *           data.port (int) – port of the vulnerability
     *           data.target (string) – target of the vulnerability
     *           data.parameter (string) – parameter of the vulnerability
     *           data.category (string) – category of the vulnerability
     *           data.cvss_score (float) – CVSS score of the vulnerability
     *           data.cvss_vector (string) – CVSS vector of the vulnerability
     *           data.first_detected_at (int) – timestamp when the vulnerability was first detected
     *           data.last_detected_at (int) – timestamp when the vulnerability was last detected
     *           data.assignee (string) – assignee of the vulnerability
     *           data.status (string) – vulnerability status of the vulnerability
     *           data.notes (string) – user provided notes of the vulnerability
     *           data.impact (string) – impact of the vulnerability
     *           data.priority (string) – priority of the vulnerability, can be changed by the user
     *           data.probability (string) – probability of the vulnerability
     *           data.mss_confirmed (boolean) – confirmed vulnerability
     *           data.manually_altered (boolean) – vulnerability edited by hand
     *           data.disabled (boolean) – vulnerability disabled are still visible, but restricted
     *           data.scan_definition_id (strings) – list of scan definition ids where detected
     *           data.results_set_id (strings) – list of result set ids related to the vulnerability
     *           data.trashed (boolean) – if true the vulnerability was trashed, trashed objects behave as if deleted from the system, but can be restored to the old status.
     *           data.tags (strings) – lists of tags
     *           data.ipv4_address (string) – ipv4 address where the vulnerability was detected
     *           data.last_detected_in (string) – result set id where the vulnerability was last detected
     *           data.last_detected_by_scan_signature (string) – scan signature where the vulnerability was last detected at
     *           data.OWASP (dict) – OWASP top ten name
     *           data.created (string) – timestamp date when the vulnerability was modified
     *            data.url (string) – URL address where the vulnerability was detected
     *           data.modified (string) – timestamp date when the vulnerability was modified
     *           data.suppression_days (int) – amount of days a vulnerability remains suppressed
     *           data.protected (boolean) – if true the vulnerability is protected and can not be trashed
     *           data.assigned_to (string) – user’s id to which this vulnerability was assigned
     *           data.suppressed_at (string) – date in which the vulnerability was suppressed (false positive or acceptable risk)
     *           data.fixed (boolean) – was the vulnerability fixed?
     * @param string $id
     * @return Vulnerability
     */
    public function find(string $id)
    {
        $vulnerability = $this->setRequestUri('vulnerability/' . $id)->get();
        if ($vulnerability) {
            $this->id = $id;
        }

        return $this;
    }

    /**
     * Update vulnerability details
     *
     * Form Parameters:
     *
     *      status – (optional) vulnerability status of the vulnerability
     *      notes – (optional) user provided notes of the vulnerability
     *      priority – (optional) priority of the vulnerability, can be changed by the user
     *
     *  Response JSON Object:
     *
     *      success (boolean) – operation was successful
     *      message (string) – human readable response
     *      errors (strings) – detailed list of errors
     * @param array $data
     * @return object|null
     * @throws Exceptions\RecordNotFoundException
     */
    public function update(array $data): object
    {
        return $this->performAction('update')->post($data);
    }

    /**
     * Delete a vulnerability
     *      * Response JSON Object:
     *
     *      success (boolean) – action was accepted
     *      message (string) – human readable response
     * @return object|null
     * @throws Exceptions\RecordNotFoundException
     */
    public function delete()
    {
        return $this->performAction('delete')->get();
    }

}
